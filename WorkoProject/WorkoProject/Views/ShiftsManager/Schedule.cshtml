@using Entities
@using WorkoProject.Utils


@model Entities.WorkSchedule

@{
    ViewBag.Title = "סידור עבודה לשבוע הקרוב";
    Layout = "~/Views/Shared/_ControlLayout.cshtml";
    var stations = ViewData["Stations"] as List<Station>;
    var shifts = Model.Template.Shifts;

    string calPath = Server.MapPath(Url.Content("~/Content/jewish-holidays-all.csv"));
    HebCalendar.SetCalendar(calPath);
    
}

<h2>סידור עבודה</h2>

<div id="work-schedule" class="row schedule-table">
    <div class="panel-heading">
        @using (Html.BeginForm("CreateWeeklySchedule", "ShiftsManager", FormMethod.Post))
        {
            <button type="submit" class="btn btn-success pull-left" data-tooltip="tooltip" data-placement="top" title="שמור סידור עבודה">שמור סידור עבודה</button>

        }
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th style="vertical-align: middle;">עמדה</th>
                    @DayOfWeek()
                </tr>
            </thead>
            <tbody>
                <tr class="day"><td colspan="8"><div>בוקר</div></td></tr>
                @PlaceWorkers(stations, shifts, 0)
                <tr class="day"><td colspan="8"><div>צהריים</div></td></tr>
                @PlaceWorkers(stations, shifts, 7)
                <tr class="day"><td colspan="8"><div>לילה</div></td></tr>
                @PlaceWorkers(stations, shifts, 14)
            </tbody>
        </table>
    </div>
</div>


@helper DayOfWeek()
{
    for (int i = 0; i < 7; i++)
    {
        string day = HebCalendar.days[Enum.GetName(typeof(DayOfWeek), Convert.ToInt32(i))];
        
        <th>
            <div>
                <span>@day</span>
                <span>@Model.StartDate.AddDays(i).ToString("dd/MM/yyyy")</span>
                <span class="holiday-name text-muted">
                    @{
                        var date = Model.StartDate.AddDays(i).ToString("M/d/yyyy");
                        foreach (var row in HebCalendar.csvArray)
                        {
                            if (row[1].Split('\"')[1].Equals(date))
                            {
                                @HebCalendar.holidays[row[0].Split('\"')[1]];
                                break;
                            }
                        }
                    }
                </span>
            </div>
        </th>
    }
}

@helper PlaceWorkers(List<Station> stations, Shift[] shifts, int shiftTime)
{
    foreach (var station in stations)
    {
        <tr>
            <td>@station.Name</td>
            @for (int i = shiftTime; i < 7 + shiftTime; i++)
            {
                List<Worker> workers = null;
                var s = shifts[i].Stations.Find(x => x.Id == station.Id);
                try
                {
                    workers = s.Workers;
                }
                catch { }
                bool hasWorkers = workers != null && workers.Count > 0;
                bool isActive = shifts[i].IsActive && (s != null && s.Status == StationStatus.Active);
                <td class="@(!isActive ? "not-active" : string.Empty) @(hasWorkers ? string.Empty : "no-workers")">
                    @if (hasWorkers)
                    {
                        <ul>
                            @foreach (var w in workers)
                            {
                                <li>@w.FirstName @w.LastName</li>
                            }
                        </ul>
                    }
                </td>
            }
        </tr>
    }
}
